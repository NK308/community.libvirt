from ansible.module_utils.basic import AnsibleModule
from ansible_collections.community.libvirt.plugins.module_utils.entry import EntryNotFound
from libvirt import virConnect, virStoragePool
from typing import Optional, overload

ENTRY_STATE_ACTIVE_MAP: dict[int, str]
ENTRY_STATE_AUTOSTART_MAP: dict[int, str]
ENTRY_STATE_PERSISTENT_MAP: dict[int, str]


class LibvirtConnection:
    module: AnsibleModule
    conn: virConnect

    @overload
    def find_entry(self, entryid: str) -> virStoragePool: ...
    def find_entry(self, entryid: int = 1) -> list[virStoragePool]: ...

    def define_from_xml(self, entryid: str, xml: str): ...
    def create(self, entryid: str): ...
    def destroy(self, entryid: str): ...
    def undefine(self, entryid: str): ...
    def build(self, entryid: str): ...
    def delete(self, entryid: str): ...

    def get_status(self, entryid: str) -> str: ...
    def get_status2(self, entry: virStoragePool) -> str: ...

    def get_autostart(self, entryid: str) -> str: ...
    def get_autostart2(self, entryid: str) -> int: ...
    def set_autostart(self, entryid: str, val): ...

    def get_uuid(self, entryid: str) -> str: ...
    def get_xml(self, entryid: str) -> str: ...
    def get_info(self, entryid: str) -> str: ...

    def get_volume_count(self, entryid: str) -> int: ...
    def get_names(self, entryid: str) -> list[str]: ...

    def get_devices(self, entryid: str) -> list[str]: ...
    def get_format(self, entryid: str) -> str: ...
    def get_host(self, entryid: str) -> str: ...
    def get_source_path(self, entryid: str) -> str: ...
    def get_type(self, entryid: str) -> str: ...

    def refresh(self, entryid: str): ...

    def get_persistent(self, entryid):


