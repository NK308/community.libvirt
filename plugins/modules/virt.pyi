from ansible.module_utils.basic import AnsibleModule
from libvirt import virConnect, virDomain
from typing import overload, Optional

VIRT_FAILED: int
VIRT_SUCCESS: int
VIRT_UNAVAILABLE: int

VIRT_STATE_NAME_MAP: dict[int, str]
ENTRY_UNDEFINE_FLAGS_MAP: dict[str, int]
MUTATE_FLAGS: list[str]


class VMNotFound(Exception):
    pass


class LibvirtConnection:
    module: AnsibleModule
    conn: virConnect

    def __init__(self, uri: str, module: AnsibleModule): ...

    @overload
    def find_vm(self, vmid: str) -> virDomain: ...
    def find_vm(self, vmid = -1) -> list[virDomain]: ...

    def shutdown(self, vmid: str): ...
    def pause(self, vmid: str): ...
    def unpause(self, vmid: str): ...
    def suspend(self, vmid: str): ...
    def resume(self, vmid: str): ...

    def create(self, vmid: str): ...
    def destroy(self, vmid: str): ...
    def undefine(self, vmid: str, flag): ...

    def get_status2(self, vm: virDomain) -> str: ...
    def get_status(self, vmid: str) -> str: ...

    def nodeinfo(self) -> dict: ...
    def get_type(self): ...
    def get_xml(self, vmid: str) -> str: ...
    def get_maxVcpus(self, vmid: str) -> int: ...
    def get_maxMemory(self, vmid: str) -> int: ...
    def getFreeMemory(self) -> int: ...

    def get_autostart(self, vmid: str) -> bool: ...
    def set_autostart(self, vmid: str, val: bool): ...

    def define_from_xml(self, xml: str): ...



class Virt:
    module: AnsibleModule
    uri: str
    conn: LibvirtConnection

    def __init__(self, uri: str, module: AnsibleModule): ...
    def __get_conn(self): ...

    def get_vm(self, vmid) -> virDomain: ...
    def state(self) -> list[str]: ...
    def info(self) -> dict: ...
    def nodeinfo(self) -> dict: ...

    def list_vms(self, state: Optional[str]) -> list[str]: ...

    def virttype(self): ...
    def autostart(self, vmid: bool, as_flag: bool) -> bool: ...
    def freemem(self) -> int: ...

    def define(self, xml: str): ...

    def shutdown(self, vmid: str): ...
    def pause(self, vmid: str): ...
    def unpause(self, vmid: str): ...
    def create(self, vmid: str): ...
    def start(self, vmid: str): ...
    def destroy(self, vmid: str): ...
    def undefine(self, vmid: str): ...

    def status(self, vmid: str) -> str: ...
    def get_xml(self, vmid: str) -> str: ...

    def get_maxVcpus(self, vmid: str) -> int: ...
    def get_max_memory(self, vmid: str) -> int: ...
