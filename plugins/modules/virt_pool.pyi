from ansible.basic.module_utils.core import AnsibleModule
from libvirt import virConnect, virStoragePool
from typing import overload, Optional

ENTRY_COMMANDS: list[str]
HOST_COMMANDS: list[str]
ENTRY_STATE_INFO_MAP: dict[int, str]
ENTRY_BUILD_FLAGS_MAP: dict[str, int]
ENTRY_DELETE_FLAGS_MAP: dict[str, int]


class LibvirtConnection:
    module: AnsibleModule
    conn: virConnect

    @overload
    def find_entry(self, entryid: str) -> virStoragePool: ...
    def find_entry(self, entryid: int = 1) -> list[virStoragePool]: ...

    def define_from_xml(self, entryid: str, xml: str): ...
    def create(self, entryid: str): ...
    def destroy(self, entryid: str): ...
    def undefine(self, entryid: str): ...
    def build(self, entryid: str): ...
    def delete(self, entryid: str): ...

    def get_status(self, entryid: str) -> str: ...
    def get_status2(self, entry: virStoragePool) -> str: ...

    def get_autostart(self, entryid: str) -> str: ...
    def get_autostart2(self, entryid: str) -> int: ...
    def set_autostart(self, entryid: str, val): ...

    def get_uuid(self, entryid: str) -> str: ...
    def get_xml(self, entryid: str) -> str: ...
    def get_info(self, entryid: str) -> str: ...

    def get_volume_count(self, entryid: str) -> int: ...
    def get_names(self, entryid: str) -> list[str]: ...

    def get_devices(self, entryid: str) -> list[str]: ...
    def get_format(self, entryid: str) -> str: ...
    def get_host(self, entryid: str) -> str: ...
    def get_source_path(self, entryid: str) -> str: ...
    def get_type(self, entryid: str) -> str: ...

    def refresh(self, entryid: str): ...

    def get_persistent(self, entryid): ...


class VirtStoragePool:
    module: AnsibleModule
    uri: str
    conn: LibvirtConnection

    def get_pool(self, entryid: str) -> virStoragePool: ...

    def list_pools(self, state: Optional[str]) -> list[str]: ...

    def state(self) -> list[str]: ...

    def autostart(self, entryid: str) -> str: ...
    def get_autostart(self, entryid: str) -> str: ...
    def set_autostart(self, entryid: str, state) -> str: ...

    def define(self, entryid: str, xml: str): ...
    def create(self, entryid: str): ...
    def start(self, entryid: str): ...
    def stop(self, entryid: str): ...
    def destroy(self, entryid: str): ...
    def undefine(self, entryid: str): ...
    def build(self, entryid: str, flags): ...
    def delete(self, entryid: str, flags): ...
    def refresh(self, entryid: str): ...

    def status(self, entryid: str) -> str: ...
    def get_xml(self, entryid: str) -> str: ...
    def info(self): ...
    def facts(self, facts_mode: Optional[str] = 'facts') -> dict: ...

